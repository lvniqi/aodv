#include <net/ip.h>
#include <linux/skbuff.h>
#include <linux/version.h>

#include "kaodv_ipenc.h"
#include "kaodv_expl.h"
#include "kaodv.h"

static u_int16_t ip_csum(unsigned short *buf, int nshorts)
{
	u_int32_t sum;

	for(sum = 0; nshorts > 0; nshorts--)
	{
		sum += *buf++;
	}

	sum = (sum >> 16) + (sum & 0xffff);
	sum += (sum >> 16);//??????

	return ~sum;
}

struct sk_buff *ip_pkt_encapsulate(struct sk_buff *skb, __u32 dest)
{
	struct min_ipenc_hdr *ipe;
	struct sk_buff *nskb;
	struct iphdr *iph;

	nskb = skb_copy_expand(skb, skb_headroom(skb), skb_tailroom(skb) + sizeof(struct min_ipenc_hdr), GFP_ATOMIC);

	if(nskb == NULL)
	{
		printk("Could not alloc new skb!\n");
		kfree_skb(skb);
		return NULL;
	}

	if(skb->sk != NULL)//socket in sk_buff
		skb_set_owner_w(nskb, skb->sk);

	iph = SKB_NETWORK_HDR_IPH(skb);

	skb_put(nskb, sizeof(struct min_ipenc_hdr));

	memcpy(nskb->data, skb->data, (iph->ihl << 2));//copy IP_header

	memcpy(nskb->data + (iph->ihl << 2) + sizeof(struct min_ipenc_hdr), skb->data + (iph->ihl << 2), skb->len - (iph->ihl << 2));//copy data 
	/*data-zone structure:
	 * IP_header
	 * min_ipenc_hdr
	 * more data
	 */
	 
	kfree_skb(skb);
	skb = nskb;

	SKB_SET_NETWORK_HDR(skb, 0);
	iph = SKB_NETWORK_HDR_IPH(skb);//iph-->IP_header

	ipe = (struct min_ipenc_hdr *)(SKB_NETWORK_HDR_RAW(skb) + (iph->ihl << 2));

	ipe->protocol = iph->protocol;
	ipe->s = 0;//no src address filed in encapsulation header
	ipe->res = 0;
	ipe->check = 0;
	ipe->daddr = iph->daddr;
	
	//update the IP_header
	iph->daddr = dest;
	iph->protocol = IPPROTO_MIPE;
	iph->tot_len = htons(ntohs(iph->tot_len) + sizeof(struct min_ipenc_hdr));

	ipe->check = ip_csum((unsigned short *)ipe, 4);

	ip_send_check(iph);//caculate IP_header check

	if(iph->id == 0)
		//ip_select_ident(iph, skb_dst(skb), NULL);
		//different in 3.18
		ip_select_ident(skb, NULL);

	return skb;
}

struct sk_buff *ip_pkt_decapsulate(struct sk_buff *skb)
{
	struct min_ipenc_hdr *ipe;
	struct iphdr *iph = SKB_NETWORK_HDR_IPH(skb);

	ipe = (struct min_ipenc_hdr *)((char *)iph + (iph->ihl << 2));

	iph->protocol = ipe->protocol;
	iph->daddr = ipe->daddr;

	memmove(skb->data + (iph->ihl << 2), skb->data + (iph->ihl << 2) + sizeof(struct min_ipenc_hdr), skb->len - (iph->ihl << 2) - sizeof(struct min_ipenc_hdr));
	//skb->len represent the length of the data-zone

	skb->trim(skb, skb->len - sizeof(struct min_ipenc_hdr));

	SKB_SET_NETWORK_HDR(skb, 0);
	iph = SKB_NETWORK_HDR_IPH(skb);

	iph->tot_len = htons(ntohs(iph->tot_len) - sizeof(struct min_ipenc_hdr));
	ip_send_check(iph);

	return skb;
}
