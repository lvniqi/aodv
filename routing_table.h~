#ifndef _ROUTING_TABLE_H_
#define _ROUTING_TABLE_H_

#include "defs.h"
#include "list.h"
#include "timer_queue.h"
#include <sys/time.h>

#define INVALID 0
#define VALID   1

#define RT_UNIDIR        0x1
#define RT_REPAIR        0x2
#define RT_INV_SEQNO     0x4
#define RT_INET_DEST     0x8

typedef struct prenode
{
	list_t l;
	struct in_addr neighbor;
}prenode_t;

typedef u32_t hash_value;

typedef struct
{
	list_t l;
	struct in_addr dest_addr;
	u32_t dest_seqno;
	struct in_addr next_hop;
	u8_t hopcnt;
	u8_t flags;
	u8_t state;
	struct timer rt_timer;
	struct timer ack_timer;
	struct timer hello_timer;
	struct timeval last_hello_time;
	u8_t hello_cnt;
	hash_value hash;
	u32_t nprenode;
	list_t prenodes;
}rt_table_t;

#define RT_TABLESIZE 64
#define RT_TABLEMASK (RT_TABLESIZE - 1)

struct routing_table
{
	u32_t num_entries;
	u32_t num_active;
	list_t tbl[RT_TABLESIZE];
};

struct routing_table rt_tbl;

rt_table_t *rt_table_check(struct in_addr dest);
rt_table_t *rt_table_insert(struct in_addr dest, struct in_addr next, u32_t hops, u32_t seqno, u32_t lifetime, u8_t state, u8_t flags);
rt_table_t *rt_table_update(rt_table_t *rt, struct in_addr next, u32_t hops, u32_t seqno, u32_t lifetime, u8_t state, u8_t flags);
void rt_table_init(void);
void rt_table_destroy(void);
rt_table_t *rt_table_update_timeout(rt_table_t *rt, u32_t lifetime);
void rt_table_update_route_timeouts(rt_table_t *fwd_rt, rt_table_t *rev_rt);
s32_t rt_table_invalidate(rt_table_t *rt);
void rt_table_delete(rt_table_t *rt);
void prenode_add(rt_table_t *rt, struct in_addr addr);
void prenode_remove(rt_table_t *rt, struct in_addr addr);
void prenode_list_destroy(rt_table_t *rt);

#endif
